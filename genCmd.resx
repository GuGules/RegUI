<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        FetmwP4/Yj8ukQfCm1cAAAAASUVORK5CYII=
</value>
  </data>
</root>